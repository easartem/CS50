sort1 uses: Bubble sort

How do you know?: We have three methods and 2 variables at our disposition to analyse the results.
The variables are the size of the input (5k, 10k, 50k) as well as its order style (random, reversed, sorted).
Bubble sort is not the overall fastest but it performs the best on small and sorted input.
First, when we compare the real running time of sort1 using different input text. We notice that it is 

Without running the test files, we can already make assumptions.
selection sort should take the longest in any given situations.


sort2 uses: Merge sort

How do you know?: TODO

sort3 uses: Selection sort

How do you know?: TODO


time ./sort1 random5000.txt
0.102
time ./sort1 random10000.txt
0.260
time ./sort1 random50000.txt
5.700

time ./sort1 reversed5000.txt
0.092
time ./sort1 reversed10000.txt
0.241
time ./sort1 reversed50000.txt
5.042

time ./sort1 sorted5000.txt
0.030
time ./sort1 sorted10000.txt
0.072
time ./sort1 sorted50000.txt
0.447

--------------------------------------------------------------
time ./sort2 random5000.txt
0.031
time ./sort2 random10000.txt
0.099
time ./sort2 random50000.txt
0.428

time ./sort2 reversed5000.txt
0.036
time ./sort2 reversed10000.txt
0.136
time ./sort2 reversed50000.txt
0.728

time ./sort2 sorted5000.txt
0.043
time ./sort2 sorted10000.txt
0.094
time ./sort2 sorted50000.txt
0.457
----------------------------------------------------------------

time ./sort3 random5000.txt
0.060
time ./sort3 random10000.txt
0.144
time ./sort3 random50000.txt
2.572

time ./sort3 reversed5000.txt
0.050
time ./sort3 reversed10000.txt
0.161
time ./sort3 reversed50000.txt
2.647

time ./sort3 sorted5000.txt
0.062
time ./sort3 sorted10000.txt
0.170
time ./sort3 sorted50000.txt
2.248
